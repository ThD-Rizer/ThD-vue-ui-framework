@mixin theme($backgroundColor, $color: false) {
  background-color: $backgroundColor;
  color: $color;

  @include hover {
    background-color: darken($backgroundColor, 15%);
  }

  &.isActive {
    background-color: darken($backgroundColor, 15%);
  }
}

.root {
  @include resetButton;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  flex: 0 0 auto;
  border-radius: 4px;
  font-weight: 500;
  color: $colorBlack;
  text-align: center;
  text-decoration: none;
  transition: $primaryTransition;
  position: relative;
  outline: none;
  vertical-align: middle;
  user-select: none;

  &.isFluid {
    display: flex;
    flex: 1;
    width: 100%;
    @include marginX(0);
  }

  &.sizeSmall {
    font-size: rem(10px);
    line-height: rem(12px);
  }

  &.sizeNormal {
    font-size: rem(13px);
    line-height: rem(16px);
  }

  &.sizeLarge {
    font-size: rem(16px);
    line-height: rem(18px);
  }

  &.isRound {
    border-radius: 30px;
  }

  &.isCircle {
    border-radius: 50%;
  }

  &.isSquared {
    border-radius: 0;
  }

  &.hasIcon {
    width: 40px;
    height: 40px;
  }

  &.isDisabled {
    color: #cecece;
    pointer-events: none;
  }

  @include hover {
    z-index: 1;
  }

  &:not(.isDepressed):not(.isFlat):not(.themeSilent) {
    box-shadow: 0 1px 8px 0 transparent;

    @include hover {
      box-shadow: 0 1px 8px 0 rgba(#000, .2);
    }
    @include active {
      box-shadow: 0 1px 8px 0 rgba(#000, .2);
    }
  }
}

$paddingXSmall: spacer(2);
$paddingYSmall: spacer(4);
$paddingXNormal: spacer(3);
$paddingYNormal: spacer(5);
$paddingXLarge: spacer(4);
$paddingYLarge: spacer(8);

.inner {
  display: flex;
  align-items: center;
  flex: 1 0 auto;
  width: inherit;
  height: inherit;
  border-radius: inherit;
  color: inherit;
  position: relative;
  white-space: nowrap;
  box-sizing: border-box;

  .sizeSmall:not(.hasIcon) & {
    padding: $paddingXSmall $paddingYSmall;
  }

  .sizeNormal:not(.hasIcon) & {
    padding: $paddingXNormal $paddingYNormal;
  }

  .sizeLarge:not(.hasIcon) & {
    padding: $paddingXLarge $paddingYLarge;
  }

  .sizeSmall.hasIcon & {
    padding: $paddingXSmall;
  }

  .sizeNormal.hasIcon & {
    padding: $paddingXNormal;
  }

  .sizeLarge.hasIcon & {
    padding: $paddingXLarge;
  }

  .contentAlignLeft & {
    justify-content: flex-start;
  }

  .contentAlignCenter & {
    justify-content: center;
  }

  .contentAlignRight & {
    justify-content: flex-end;
  }

  .contentAlignJustify & {
    justify-content: space-between;
  }
}

.themePrimary {
  @include theme($colorPrimary, $colorWhite);
}

.themeSecondary {
  @include theme($colorSecondary, $colorWhite);
}

.themeSuccess {
  @include theme($colorSuccess, $colorWhite);
}

.themeDanger {
  @include theme($colorDanger, $colorWhite);
}

.themeWarning {
  @include theme($colorWarning);
}

.themeInfo {
  @include theme($colorInfo, $colorWhite);
}

.themeLight {
  @include theme($colorLight);
}

.themeDark {
  @include theme($colorDark, $colorWhite);
}

.themeSilent {
  cursor: default !important;

  & .inner {
    width: auto;
  }
}

/*
.themeBackgroundBrand,
.themeOutlineBrand {
  &::before {
    content: '';
    display: block;
    @include gradientBrand;
    border-radius: inherit;
    position: absolute;
    @include positionAll(0);
  }

  &.isDisabled::before {
    opacity: .5;
    filter: grayscale(1);
  }
}

.themeBackgroundBrand {
  & .inner {
    color: $colorWhite;
  }
}

.themeOutlineBrand {
  & .inner {
    width: auto;
    background-color: $colorWhite;
    border-radius: 2px;
    padding: 10px;
    margin: 2px;
  }

  &.sizeSmall .inner {
    padding: 6px;
  }

  &.sizeLarge .inner {
    padding: 14px;
  }
}
*/
